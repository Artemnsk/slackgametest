functions:
  # User is webserver.
  - webserverUser(): auth.uid === 'game-webserver'
  - teamExists(teamKey): root.teams[teamKey].exists()
  - channelExists(teamKey, channelKey): root.channels[teamKey][channelKey].exists()
  - playerExists(teamKey, channelKey, playerKey): root.players[teamKey][channelKey][playerKey].exists()
  - gameExists(teamKey, channelKey, gameKey): root.games[teamKey][channelKey][gameKey].exists()
  - gamerExists(teamKey, channelKey, gameKey, gamerKey): root.games[teamKey][channelKey][gameKey].gamers[gamerKey].exists()
  - isValidChannel(): (next.phase === 'BREAK' && next.nextGame.exists()) || (next.phase === 'IN_GAME' && next.currentGame.exists())
  # When create new gamer appropriate player must exist.
  - isValidGamer(teamKey, channelKey, gamerKey): prev.exists() || playerExists(teamKey, channelKey, gamerKey)

  # Action Requests validation.
  - validActionRequest(actionRequest): validCastSpellActionRequest(actionRequest) || validUseItemActionRequest(actionRequest)
  - validCastSpellActionRequest(actionRequest): actionRequest.type === 'CAST_SPELL' && actionRequest.spellId.exists()
  - validUseItemActionRequest(actionRequest): actionRequest.type === 'USE_ITEM' && actionRequest.itemId.exists()

schema:
  type: object
  additionalProperties: false
  constraint: (root.system.maintenance !== true)
  properties:
    # Stores information about system. Is not accessible, just for usage via Admin SDK.
    system:
      type: object
      properties:
        maintenance:
          type: boolean
        version:
          type: boolean
    # Store information about teams this app installed on.
    teams:
      type: object
      indexOn: ['active']
      $teamKey:
        type: object
        additionalProperties: false
        constraint: next.active === false || (next.token.exists() && next.userId.exists() && next.botId.exists() && next.botToken.exists())
        required: ['name', 'active']
        properties:
          active:
            type: boolean
          name:
            type: string
          token:
            type: string
          # User who installed this app.
          userId:
            type: string
          # Admin of the app. Separately set via prompt.
          admin:
            type: string
          botId:
            type: string
          botToken:
            type: string
    # Stores information about team channels this app used in.
    channels:
      type: object
      constraint: teamExists($teamKey)
      $teamKey:
        type: object
        indexOn: ['active']
        $channelKey:
          type: object
          additionalProperties: false
          constraint: isValidChannel()
          required: ['active', 'name', 'timeStep', 'breakTime', 'phase']
          properties:
            active:
              type: boolean
            name:
              type: string
            timeStep:
              type: number
              constraint: next > 0
            breakTime:
              type: number
              constraint: next > 0
            phase:
              type: string
              enum: ['BREAK', 'IN_GAME']
            # TODO: validate these fields depends on phase.
            # When next game must start.
            nextGame:
              type: number
            # Reference to current game.
            currentGame:
              type: string
              constraint: (!next.exists() || gameExists($teamKey, $channelKey, next))
    # Stores information about players: channel users who created character in game channel.
    players:
      type: object
      constraint: teamExists($teamKey)
      $teamKey:
        type: object
        constraint: channelExists($teamKey, $channelKey)
        $channelKey:
          type: object
          indexOn: ['active']
          $playerKey:
            type: object
            additionalProperties: false
            # TODO:
            # constraint: true
            required: ['active', 'name', 'gold']
            properties:
              active:
                type: boolean
              name:
                type: string
              gold:
                type: number
              items:
                type: object
                ~$itemId:
                  type: object
                  required: ['id']
                  properties:
                    id:
                      type: string
                    emoji:
                      type: string
                    label:
                      type: string
                    description:
                      type: string

    # Games created per each channel
    games:
      type: object
      constraint: teamExists($teamKey)
      $teamKey:
        type: object
        constraint: channelExists($teamKey, $channelKey)
        $channelKey:
          type: object
          indexOn: ['phase']
          $gameKey:
            type: object
            additionalProperties: false
            required: ['phase', 'timeStep']
            properties:
              timeStep:
                type: number
                constraint: next > 0
              phase:
                type: string
                enum: ['PAUSE', 'OVER', 'RUNNING']
              gamers:
                type: object
                ~$gamerKey:
                  type: object
                  constraint: isValidGamer($teamKey, $channelKey, $gamerKey)
                  required: ['name', 'health', 'mana', 'dead']
                  additionalProperties: false
                  properties:
                    name:
                      type: string
                    dead:
                      type: boolean
                    health:
                      type: number
                      constraint: next >= 0
                    mana:
                      type: number
                      constraint: next >= 0
                    spells:
                      type: object
                      ~$spellId:
                        type: object
                        required: ['id']
                        properties:
                          id:
                            type: string
                            constraint: next === $spellId
                          emoji:
                            type: string
                          label:
                            type: string
                          description:
                            type: string
                    items:
                      type: object
                      ~$itemId:
                        type: object
                        required: ['id']
                        properties:
                          id:
                            type: string
                          emoji:
                            type: string
                          label:
                            type: string
                          description:
                            type: string
    # Raw Actions for games.
    actionRequests:
      type: object
      constraint: teamExists($teamKey)
      $teamKey:
        type: object
        constraint: channelExists($teamKey, $channelKey)
        $channelKey:
          type: object
          constraint: gameExists($teamKey, $channelKey, $gameKey)
          $gameKey:
            type: object
            $actionRequestKey:
              type: object
              constraint: (!next.exists() || validActionRequest(next))
              required: ['type', 'created']
              properties:
                type:
                  type: string
                  enum: ['CAST_SPELL', 'USE_ITEM', 'initiator', 'target']
                created:
                  type: number
                target:
                  type: string
                  constraint: (!next.exists() || gamerExists($teamKey, $channelKey, $gameKey, next))
                initiator:
                  type: string
                  constraint: (!next.exists() || gamerExists($teamKey, $channelKey, $gameKey, next))
                spellId:
                  type: string
                itemId:
                  type: string

access:
  - location: /teams
    read: webserverUser()
  - location: /teams/$teamKey
    write: webserverUser()

  - location: /channels/$teamKey
    read: webserverUser()
  - location: /channels/$teamKey/$channelKey
    write: webserverUser()

  - location: /players/$teamKey/$channelKey/
    read: webserverUser()
  - location: /players/$teamKey/$channelKey/$playerKey
    write: webserverUser()

  - location: /games/$teamKey/$channelKey/
    read: webserverUser()
  - location: /games/$teamKey/$channelKey/$gameKey
    write: webserverUser()

  - location: /actionRequests/$teamKey/$channelKey/$gameKey
    read: webserverUser()
  - location: /actionRequests/$teamKey/$channelKey/$gameKey/$actionRequestKey
    write: webserverUser()





  - location: /state
    read: webserverUser()
    write: webserverUser()

  - location: /states
    read: webserverUser()
  - location: /states/$channelKey
    write: webserverUser()